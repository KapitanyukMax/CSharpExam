// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MessengerDbContext))]
    [Migration("20230629053026_myNewDB")]
    partial class myNewDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "UnitedWork"
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Credentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Max111",
                            MailAddress = "maxik20192006max@gmail.com",
                            Name = "Max",
                            Password = "12345678",
                            PhoneNumber = "+38(068)-762-92-33"
                        },
                        new
                        {
                            Id = 2,
                            Login = "Yurii111",
                            Name = "Yurii",
                            Password = "12345678"
                        },
                        new
                        {
                            Id = 3,
                            Login = "Ivan111",
                            Name = "Ivan",
                            Password = "12345678",
                            PhoneNumber = "+38(095)-471-26-24"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<int>("CredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialsId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            CredentialsId = 1,
                            IPAddress = "192.168.1.107"
                        },
                        new
                        {
                            CredentialsId = 2,
                            IPAddress = "192.168.1.107"
                        },
                        new
                        {
                            CredentialsId = 3,
                            IPAddress = "192.168.1.107"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.UserChat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UsersChats");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ChatId = 1
                        },
                        new
                        {
                            UserId = 1,
                            ChatId = 2
                        },
                        new
                        {
                            UserId = 1,
                            ChatId = 4
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 2
                        },
                        new
                        {
                            UserId = 2,
                            ChatId = 3
                        },
                        new
                        {
                            UserId = 3,
                            ChatId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ChatId = 3
                        },
                        new
                        {
                            UserId = 3,
                            ChatId = 4
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.FileMessage", b =>
                {
                    b.HasBaseType("DataAccess.Entities.Message");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FileMessage");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            ChatId = 2,
                            SenderId = 3,
                            SendingTime = new DateTime(2023, 6, 20, 18, 0, 30, 0, DateTimeKind.Unspecified),
                            Caption = "Here is the file with themes",
                            Url = "E:\\Max\\Coding\\CW_dot_net.pdf"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.TextMessage", b =>
                {
                    b.HasBaseType("DataAccess.Entities.Message");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TextMessage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChatId = 1,
                            SenderId = 2,
                            SendingTime = new DateTime(2023, 6, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hello! How are you?"
                        },
                        new
                        {
                            Id = 2,
                            ChatId = 1,
                            SenderId = 1,
                            SendingTime = new DateTime(2023, 6, 22, 12, 1, 0, 0, DateTimeKind.Unspecified),
                            Text = "I'm fine"
                        },
                        new
                        {
                            Id = 3,
                            ChatId = 1,
                            SenderId = 3,
                            SendingTime = new DateTime(2023, 6, 22, 12, 5, 0, 0, DateTimeKind.Unspecified),
                            Text = "Pretty good) And you?"
                        },
                        new
                        {
                            Id = 4,
                            ChatId = 1,
                            SenderId = 2,
                            SendingTime = new DateTime(2023, 6, 22, 12, 5, 30, 0, DateTimeKind.Unspecified),
                            Text = "Not bad. Let's write some code"
                        },
                        new
                        {
                            Id = 5,
                            ChatId = 1,
                            SenderId = 2,
                            SendingTime = new DateTime(2023, 6, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hi! I found an interesting theme for our course work. It's messenger, what do you think?"
                        },
                        new
                        {
                            Id = 7,
                            ChatId = 2,
                            SenderId = 3,
                            SendingTime = new DateTime(2023, 6, 20, 18, 2, 0, 0, DateTimeKind.Unspecified),
                            Text = "Ok, it's good, let's choose it"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Message", b =>
                {
                    b.HasOne("DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Credentials", "Credentials")
                        .WithOne("User")
                        .HasForeignKey("DataAccess.Entities.User", "CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("UsersChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UsersChats");
                });

            modelBuilder.Entity("DataAccess.Entities.Credentials", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UsersChats");
                });
#pragma warning restore 612, 618
        }
    }
}
